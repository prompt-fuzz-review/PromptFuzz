#!/bin/bash

source ../common.sh

PROJECT_NAME=libaom
STALIB_NAME=libaom.a
DYNLIB_NAME=libaom.so
DIR=$(pwd)


function download() {
    if [[ ! -z "${DOCKER_CONTAINER:-}" ]]; then
        apt-get update && apt-get install -y cmake yasm wget
    fi
    cd $SRC
    if [ -x "$(command -v coscli)" ]; then
        coscli cp cos://sbd-testing-1251316161/bench_archive/LLM_FUZZ/archives/aom.tar.gz aom.tar.gz
        tar -xvf aom.tar.gz && rm aom.tar.gz
    else
        git clone --depth 1 https://aomedia.googlesource.com/aom
    fi
    mv aom ${PROJECT_NAME}
}

function build_lib() {
    # Build aom
    LIB_STORE_DIR=$WORK/build
    mkdir -p ${LIB_STORE_DIR}
    pushd ${LIB_STORE_DIR}
    # Remove files generated by the previous build.
    rm -rf ./*

    # oss-fuzz has 2 GB total memory allocation limit. So, we limit per-allocation
    # limit in aom to 1 GB to avoid OOM errors. A smaller per-allocation is
    # needed for MemorySanitizer (see bug oss-fuzz:9497 and bug oss-fuzz:9499).
    if [[ $CFLAGS = *sanitize=memory* ]]; then
        extra_c_flags='-DAOM_MAX_ALLOCABLE_MEMORY=536870912'
    else
        extra_c_flags='-DAOM_MAX_ALLOCABLE_MEMORY=1073741824'
    fi
    # Also, enable DO_RANGE_CHECK_CLAMP to suppress the noise of integer overflows
    # in the transform functions.
    extra_c_flags+=' -DDO_RANGE_CHECK_CLAMP=1'

    extra_cmake_flags=
    # MemorySanitizer requires that all program code is instrumented. Therefore we
    # need to replace all inline assembly code that writes to memory with pure C
    # code. Disable all assembly code for MemorySanitizer.
    if [[ $CFLAGS = *sanitize=memory* ]]; then
    extra_cmake_flags+="-DAOM_TARGET_CPU=generic"
    fi

    # Add -DSANITIZE cmake flag to avoid the undefined symbol error.
    if [[ $CFLAGS = *sanitize=address* ]]; then
        extra_cmake_flags+="-DSANITIZE=address"
    else
        extra_cmake_flags+="-DSANITIZE=fuzzer-no-link"
    fi


    cmake $SRC/${PROJECT_NAME} -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_FLAGS_RELEASE='-O3 -g' \
    -DCMAKE_CXX_FLAGS_RELEASE='-O3 -g' -DCONFIG_PIC=1 -DCONFIG_LOWBITDEPTH=1 \
    -DENABLE_EXAMPLES=0 -DENABLE_DOCS=0 -DENABLE_TESTS=0 \
    -DCONFIG_SIZE_LIMIT=1 -DDECODE_HEIGHT_LIMIT=12288 -DDECODE_WIDTH_LIMIT=12288 \
    -DAOM_EXTRA_C_FLAGS="${extra_c_flags}" -DENABLE_TOOLS=0 \
    -DAOM_EXTRA_CXX_FLAGS="${extra_c_flags}" ${extra_cmake_flags} -DBUILD_SHARED_LIBS=1
    #-DCONFIG_AV1_ENCODER=0 \
    make -j$(nproc)
    popd
}

function build_oss_fuzz() {
    cd $LIB_STORE_DIR
    # build fuzzers
    fuzzer_src_name=av1_dec_fuzzer
    fuzzer_name=${fuzzer_src_name}

    $CXX $CXXFLAGS -std=c++11 \
    -I$SRC/${PROJECT_NAME} \
    -I${LIB_STORE_DIR} \
    -Wl,--start-group \
    $LIB_FUZZING_ENGINE \
    $SRC/${PROJECT_NAME}/examples/${fuzzer_src_name}.cc -o $OUT/${fuzzer_name} \
    ${LIB_STORE_DIR}/libaom_static.a -Wl,--end-group
}

function copy_include() {
    make_include aom
}

function build_corpus() {
    cd ${LIB_BUILD}
    wget https://storage.googleapis.com/aom-test-data/fuzzer/dec_fuzzer_seed_corpus.zip 
    unzip dec_fuzzer_seed_corpus.zip 
    rm dec_fuzzer_seed_corpus.zip
    mv testdata corpus
}

function build_dict() {
    cp $SRC/${PROJECT_NAME}/examples/av1_dec_fuzzer.dict ${LIB_BUILD}/fuzzer.dict
}

build_all
